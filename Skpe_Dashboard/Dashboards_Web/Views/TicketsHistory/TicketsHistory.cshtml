@model List<Dashboards_Web.Models.TicketHistoryModel>
@{
    ViewBag.Title = "Tickets History";
}

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
<style>
    .customDropDown {
        color: #fff !important;
        background-color: #607d8b !important;
        text-align: center;
        font-size: 14px;
        height: 35px;
        /*font-weight: bold;*/
    }

    .rowBorder {
        border: 2px solid #337ab7;
        border-radius: 2px;
        padding: 2px;
    }

    .info th {
        background: #607d8b !important;
    }

        .info th a {
            color: white;
            font-weight: bold;
            font-size: medium;
        }

    .webgrid-footer {
        background: #607d8b;
        text-align: center;
        color: white;
        font-weight: bold;
        font-size: medium;
    }

    .divScroll {
        overflow-y: auto;
        background-color: white;
        max-height: 560px;
        text-align: justify;
    }

    .container {
        width: 1180px;
        /*margin-top: 3em;*/
    }

    #accordion .panel {
        border-radius: 0;
        border: 0;
        margin-top: 0px;
    }

    /*#accordion a {
        display: block;
        padding: 10px 15px;
        border-bottom: 1px solid #b42b2b;
        text-decoration: none;
    }*/

    #accordion .panel-heading a.collapsed:hover,
    #accordion .panel-heading a.collapsed:focus {
        background-color: #607d8b;
        color: white;
        transition: all 0.2s ease-in;
    }

        #accordion .panel-heading a.collapsed:hover::before,
        #accordion .panel-heading a.collapsed:focus::before {
            color: white;
        }

    #accordion .panel-heading {
        padding: 0;
        border-radius: 0px;
        text-align: center;
    }

        #accordion .panel-heading a:not(.collapsed) {
            color: white;
            background-color: #607d8b;
            transition: all 0.2s ease-in;
        }

        /* Add Indicator fontawesome icon to the left */
        #accordion .panel-heading .accordion-toggle::before {
            font-family: 'FontAwesome';
            content: '\f00d';
            float: left;
            color: white;
            font-weight: lighter;
            transform: rotate(0deg);
            transition: all 0.2s ease-in;
        }

        #accordion .panel-heading .accordion-toggle.collapsed::before {
            color: #444;
            transform: rotate(-135deg);
            transition: all 0.2s ease-in;
        }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        if ($("#format :selected").val() == "OwningHistory") {
            $("#divDrop").show();
            $("#durOthers").hide();
            $("#durOwningHistory").show();
        }
        else {
            $("#divDrop").hide();
            $("#durOthers").show();
            $("#durOwningHistory").hide();
        }
    });
    function DropDownDaysList() {

        if ($("#format :selected").val() == "OwningHistory") {
            $("#divDrop").show();
            $("#durOthers").hide();
            $("#durOwningHistory").show();
        }
        else {
            $("#divDrop").hide();
            $("#durOthers").show();
            $("#durOwningHistory").hide();
        }
        $("#btnExport").attr("disabled", true);
        //if ($("#format :selected").val() != "All")
            $("#rowDiv").hide();
    }

    $(document).ready(function () {
        var todaysDate = new Date(); // Gets today's date

        // Max date attribute is in "YYYY-MM-DD".  Need to format today's date accordingly

        var year = todaysDate.getFullYear();                        // YYYY
        var minmonth = ("0" + (todaysDate.getMonth() - 1)).slice(-2);  // MM
        var maxmonth = ("0" + (todaysDate.getMonth() + 1)).slice(-2);
        var day = ("0" + todaysDate.getDate()).slice(-2);           // DD
        var minDate = (year + "-" + minmonth + "-" + day);
        var maxDate = (year + "-" + maxmonth + "-" + day);

        $('#fromDate').attr('min', minDate);
        $('#fromDate').attr('max', maxDate);
        $('#toDate').attr('min', minDate);
        $('#toDate').attr('max', maxDate);

        var firstDay = new Date(todaysDate.getFullYear(),
            todaysDate.getMonth(), 1);

        if ('@ViewData["fromDate"].ToString()' !="") {
            document.getElementById("toDate").valueAsDate = new Date('@ViewData["toDate"]');
            document.getElementById("fromDate").valueAsDate = new Date('@ViewData["fromDate"]');
        }
        else {
            document.getElementById("toDate").valueAsDate = new Date();
            document.getElementById("fromDate").valueAsDate = firstDay;
        }

    });

    function formSubmit() {
        if ($("#fromDate").val() <= $("#toDate").val()) {
            document.getElementById("fromDate").innerHTML = $("#fromDate").val();
            document.forms["Form1"].submit();
        }
        else {
            alert("From date should be less than to date. Please choose valid date");
            return;
        }
    }
</script>
@using (Html.BeginForm("TicketsHistory", "TicketsHistory", FormMethod.Get, new { @name = "Form1" }))
{
    <div class="container-fluid">

        <div class="container-fluid" style="padding: 0%;margin-bottom:1%;">
            <div class="row">
                <table style="width:60%;align-content:center">
                    <tr>
                        <td>From:</td>
                        <td>
                            <input type="date" id="fromDate" name="fDate" class="form-control" style="width:80%" />
                        </td>
                        <td>To:</td>
                        <td>
                            <input type="date" id="toDate" name="tDate" class="form-control" style="width:80%" />
                        </td>
                        <td>
                            @Html.DropDownList("format", new List<SelectListItem>
                                                    {
                                                    new SelectListItem{ Text="All Sev Changes", Value = "All" },
                                                    new SelectListItem{ Text="Severity Downgrade", Value = "SeverityDowngrade" },
                                                    new SelectListItem{ Text="Severity Upgrade", Value = "SeverityUpgrade" },
                                                    new SelectListItem{ Text="Sev2 Incidents", Value = "Severity2" },
                                                    new SelectListItem{ Text="Owning History", Value = "OwningHistory" },
                                                    }, new { @class = "btn dropdown-toggle customDropDown", @onchange = "DropDownDaysList();" })
                        </td>
                        <td id="divDrop">
                            <div>
                                @Html.DropDownList("team", new List<SelectListItem>
                                                        {
                                                        new SelectListItem{ Text="OCDM", Value = "OCDM" },
                                                        new SelectListItem{ Text="BVD", Value = "BVD" },
                                                        }, new { @class = "btn dropdown-toggle customDropDown" })
                            </div>
                        </td>

                        <td>
                            <button type="button" class="btn btn-success" style="background-color:#607d8b" onclick="formSubmit()">
                                <span class="glyphicon glyphicon-search"></span>
                            </button>
                        </td>

                        @*<td><div style="text-align:right;height:30px;">@Html.ActionLink("ExportExcel", "ExportExcel_HistoryData", "TicketsHistory", null, new { @class = "glyphicon glyphicon-save-file" })</div></td>*@

                        @if (Model != null && Model.Count >= 1)
                        {
                            <td><a href="~/TicketsHistory/ExportExcel_HistoryData" class="btn btn-success" id="btnExport" style="background-color:#607d8b" title="Export to Excel"><span class="glyphicon glyphicon-save-file"></span></a></td>
                        }
                    </tr>

                </table>


            </div>
        </div>
        @if (Model != null && Model.Count > 0)
        {
            if (ViewBag.OwningHistory != null && ViewBag.OwningHistory == "OwningHistory")
            {
                int i = 0;
                var items = Model.GroupBy(a => a.IncidentId).ToList();
                <div class="row rowBorder" id="rowDiv">
                    <div style="width:100%;height:40px;background-color:#607d8b;color:white;font-size:medium;font-weight:bold;text-align:center">
                        <div style="margin:auto">
                            Total Incidents &minus; @items.Count
                        </div>
                        <div style="color:yellow;font-size:12px;">@ViewBag.DataItems</div>
                    </div>
                    <div class="divScroll">
                        <div id="accordion" class="panel-group">
                            @foreach (var item in items)
                            {
                                i = i + 1;

                                <div class="panel">
                                    <div class="panel-heading">
                                        <h4 class="panel-title">
                                            <a href="#panelBodyOne_@i" class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" style=" display: block; padding: 10px 15px; border-bottom: 1px solid #b42b2b; text-decoration: none;">@item.Key &nbsp;&nbsp;&nbsp;# @Model.Count(h => h.IncidentId.Equals(item.Key))</a>
                                        </h4>
                                    </div>
                                    <div id="panelBodyOne_@i" class="panel-collapse collapse">
                                        <div class="panel-body" style="align-content:center">
                                            <p>
                                                <table style="width:50%;margin:auto" class="table table-bordered table-hover">
                                                    <thead style="background-color:#607d8b;color:white">
                                                        <tr>
                                                            <th colspan="2" style="text-align:center">Incident - <a href="https://portal.microsofticm.com/imp/v3/incidents/details/@item.Key/home" target="_blank" style="text-decoration:none;color:black">@item.Key</a></th>
                                                        </tr>
                                                        <tr>
                                                            <th>Owning Team</th>
                                                            <th>Change Date</th>
                                                        </tr>
                                                    </thead>
                                                    @foreach (var data in Model)
                                                    {
                                                        if (data.IncidentId.Equals(item.Key))
                                                        {
                                                            <tr>
                                                                <td>@data.OwningTeam</td>
                                                                <td>@data.ChangeDate</td>
                                                            </tr>
                                                        }
                                                    }
                                                </table>
                                            </p>
                                        </div>
                                    </div>
                                </div>

                            }
                        </div>
                    </div>
                </div>

            }

            else if (ViewBag.Sev2 != null && ViewBag.Sev2 == "Sev2")
            {
                <div class="row rowBorder" id="rowDiv">
                    <div class="col-sm-12" style="padding:0;margin:0;">
                        <div class="divScroll">
                            @{
                                var gridSev2 = new WebGrid(
                                                    canPage: false,
                                                    fieldNamePrefix: "tktHstry",
                                                    canSort: true,
                                                    ajaxUpdateContainerId: "gridSev2"
                                                    );

                                gridSev2.Bind(Model, autoSortAndPage: false);
                                //gridSev2.Pager(WebGridPagerModes.All);

                                @gridSev2.GetHtml(htmlAttributes: new { id = "gridSev2" },
                                        fillEmptyRows: false,
                                        tableStyle: "table table-bordered table-hover",
                                        mode: WebGridPagerModes.All,
                                        headerStyle: "info",
                                        footerStyle: "webgrid-footer",
                                        columns: gridSev2.Columns(
                                        gridSev2.Column("IncidentId", "Incident No.", format:@<text><a href="https://portal.microsofticm.com/imp/v3/incidents/details/@item.IncidentId/home" target="_blank">@item.IncidentId</a></text>, canSort: true),
//gridSev2.Column("Status", "Status"),
//gridSev2.Column("Severity", format: item => Html.Raw("<span" + (item.Severity == 2 ? " class='RED'" : "") + ">" + item.Severity + "</span>")),
gridSev2.Column("CreateDate", "Created Date"),
gridSev2.Column("Title", "Title", format: @<text>@item.Title.ToString().Substring(0, (item.Title.Length > 60 ? 60 : item.Title.Length))</text>+ "..."),
gridSev2.Column("ChangeDate", "Change Date"),
gridSev2.Column("OwningTeam", "Owning Team")

)
);
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row rowBorder" id="rowDiv">
                    <div class="col-sm-12" style="padding:0;margin:0;">

                        <div class="divScroll">
                            @{
                                var gridTktHistory = new WebGrid(
                                                    canPage: false,
                                                    fieldNamePrefix: "tktHstry",
                                                    canSort: true,
                                                    ajaxUpdateContainerId: "gridTktHistory"

                                                    );

                                gridTktHistory.Bind(Model, autoSortAndPage: false);
                                //gridTktHistory.Pager(WebGridPagerModes.All);

                                @gridTktHistory.GetHtml(htmlAttributes: new { id = "gridTktHistory" },
                                                                           fillEmptyRows: false,
                                                                           tableStyle: "table table-bordered table-hover",
                                                                           mode: WebGridPagerModes.All,
                                                                           headerStyle: "info",
                                                                           footerStyle: "webgrid-footer",
                                                                           columns: gridTktHistory.Columns(
                                                                           gridTktHistory.Column("IncidentId", "Incident No", format:@<text><a href="https://portal.microsofticm.com/imp/v3/incidents/details/@item.IncidentId/home" target="_blank">@item.IncidentId</a></text>),
gridTktHistory.Column("Severity", "Severity"),
//gridTktHistory.Column("Title", "Title", format: @<text>@item.Title.ToString().Substring(0, (item.Title.Length > 80 ? 80 : item.Title.Length))</text>+ "..."),
gridTktHistory.Column("CreateDate", "Created Date"),
gridTktHistory.Column("ChangeDate", "Change Date"),
gridTktHistory.Column("OwningTeam", "Owning Team"),
gridTktHistory.Column("Format", "Format")
)
)
                            }

                        </div>
                    </div>
                </div>
            }

        }
        else
        {
            if (Model == null)
            {
                <div style="font-size:medium;color:red;text-align:center;"> <marquee direction="right">Currently Kusto is down.So no data is available</marquee></div>

            }
            else
            {
                <div style="font-size:medium;color:red;text-align:center;"> <marquee direction="right">No data available for given dates </marquee></div>
            }
        }
    </div>
}

