let UTCtoPST=(UTCdate:datetime)
{
    UTCdate - case(UTCdate between(datetime(2018-03-11 10:00:00.0000000)..datetime(2018-11-04 10:00:00.0000000)) or UTCdate between(datetime(2019-03-10 10:00:00.0000000)..datetime(2019-11-03 10:00:00.0000000)) or UTCdate between(datetime(2020-03-08 10:00:00.0000000)..datetime(2020-11-01 10:00:00.0000000)) or UTCdate between(datetime(2021-03-14 10:00:00.0000000)..datetime(2021-11-07 10:00:00.0000000)) or UTCdate between(datetime(2022-03-13 10:00:00.0000000)..datetime(2022-11-06 10:00:00.0000000)) or UTCdate between(datetime(2023-03-12 10:00:00.0000000)..datetime(2023-11-05 10:00:00.0000000)) or UTCdate between(datetime(2024-03-10 10:00:00.0000000)..datetime(2024-11-03 10:00:00.0000000)),7h,8h)
};
let DataTimespan=90d;
let SOCIncidents=()
    {
        Incidents 
        | where CreateDate >= ago(DataTimespan)  and OwningTeamName in("SKYPEFORBUSINESS\\SOCCorp","SKYPEFORBUSINESS\\Triage", "SKYPEFORBUSINESS\\SkypeOperationsCenter","SKYPEFORBUSINESS\\SOCDedicated","SKYPEFORBUSINESS\\SOCITAR", "SKYPEFORBUSINESS\\SOCMulti-Tenant") 
        | distinct IncidentId 
        | join kind = inner 
            ( Incidents 
                | where CreateDate >= ago(DataTimespan) and IncidentType == "CustomerReported"  
                | project SourceName, OwningContactAlias, HistoryIncidentId=IncidentId, OccurringDeviceName, Severity, Status, Title, CreateDate_UTC = CreateDate, CreateDate_PST=UTCtoPST(CreateDate), OwningTeamName, Keywords, HowFixed, ResolvedBy, ModifiedDate, RoutingId, IncidentType, MitigatedBy ) on $left.IncidentId == $right.HistoryIncidentId 
                | where OwningTeamName in("SKYPEFORBUSINESS\\SOCCorp","SKYPEFORBUSINESS\\Triage", "SKYPEFORBUSINESS\\SkypeOperationsCenter","SKYPEFORBUSINESS\\SOCDedicated","SKYPEFORBUSINESS\\SOCITAR", "SKYPEFORBUSINESS\\SOCMulti-Tenant"
            ) 
        | summarize arg_max(ModifiedDate,*) by IncidentId 
        | project IncidentId, ModifiedDate, SourceName, OwningContactAlias, HistoryIncidentId, OccurringDeviceName, Severity, Status, Title, CreateDate_UTC, CreateDate_PST, OwningTeamName, Keywords, HowFixed, ResolvedBy, MitigatedBy,RoutingId, IncidentType 
    }; 
    let TempIncidentHistory=() 
    { 
        SOCIncidents 
        | distinct IncidentId 
        | join kind = inner 
            ( IncidentHistory 
                | project IncidentId,ChangeDate,ChangeCategories,OwningTeamName,Status,OwningContactAlias,ChangedBy 
            ) on IncidentId
        | project IncidentId,ChangeDate,ChangeCategories,OwningTeamName,Status,OwningContactAlias,ChangedBy 
    }; 
    let AssignedDateUTC1=() 
    { 
        SOCIncidents | distinct IncidentId 
        | join kind = inner 
            ( TempIncidentHistory 
                | project IncidentId,OwningTeamName,ChangeDate 
                | where OwningTeamName in("SKYPEFORBUSINESS\\SOCCorp","SKYPEFORBUSINESS\\Triage", "SKYPEFORBUSINESS\\SkypeOperationsCenter","SKYPEFORBUSINESS\\SOCDedicated","SKYPEFORBUSINESS\\SOCITAR", "SKYPEFORBUSINESS\\SOCMulti-Tenant") 
                | summarize AssignedDate_UTC = min(ChangeDate) by IncidentId 
            ) on IncidentId | project IncidentId, AssignedDate_UTC 
    }; 
    let AcknowledgeDateUTC1=() 
    { 
        AssignedDateUTC1 | join kind = inner ( TempIncidentHistory ) on IncidentId
        | where ChangeDate >= AssignedDate_UTC and ChangeCategories has "AssignContact" 
        | summarize AcknowledgeDate_UTC = min(ChangeDate) by IncidentId, ChangedBy 
        | project IncidentId, AcknowledgeDate_UTC, ChangedBy | summarize arg_min(AcknowledgeDate_UTC, *) by IncidentId 
        | project IncidentId, AcknowledgeDate_UTC, AckBy = ChangedBy 
    };
    let TimeToRespondUTC1=() 
    { 
        AcknowledgeDateUTC1 | join kind = inner ( TempIncidentHistory ) on IncidentId 
        | where ChangeDate > AcknowledgeDate_UTC | summarize TimeToRespond_UTC = min(ChangeDate) by IncidentId 
        | project IncidentId, TimeToRespond_UTC | summarize arg_min(TimeToRespond_UTC, *) by IncidentId | project IncidentId, TimeToRespond_UTC 
    };   
    let SOCFinal=() 
    { 
        SOCIncidents 
        | join kind=leftouter ( AssignedDateUTC1 ) on IncidentId 
        | join kind=leftouter ( AcknowledgeDateUTC1 ) on IncidentId 
        | join kind=leftouter ( TimeToRespondUTC1 ) on IncidentId         
        | project IncidentId, SourceName, OwningContactAlias, OccurringDeviceName, OwningTeamName, Severity, Status, Title, RoutingId, Keywords, HowFixed, ResolvedBy, MitigatedBy, IncidentType, CreateDate_UTC, CreateDate_PST, AssignedDate_PST=UTCtoPST(AssignedDate_UTC),AssignedDate_UTC, AcknowledgeDate_UTC,AcknowledgeDate_PST=UTCtoPST(AcknowledgeDate_UTC), AckBy, TimeToRespond_PST = UTCtoPST(TimeToRespond_UTC)
    }; 
   let WALSMonthly=() 
    { 
        SOCFinal 
        | extend StartDate=startofmonth(CreateDate_PST) 
        | extend EndDate=endofmonth(CreateDate_PST) 
    };
    WALSMonthly 
    | where Status =="ACTIVE" and Severity > 2
    | project IncidentId, AssignedDate_UTC, AcknowledgeDate_UTC, AckBy
