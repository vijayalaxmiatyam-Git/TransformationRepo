let UTCtoPST=(UTCdate:datetime)
{
    UTCdate- case( UTCdate between (datetime(2018-03-11 10:00:00.0000000)..datetime(2018-11-04 10:00:00.0000000)) or UTCdate between (datetime(2019-03-10 10:00:00.0000000)..datetime(2019-11-03 10:00:00.0000000)) or UTCdate between (datetime(2020-03-08 10:00:00.0000000)..datetime(2020-11-01 10:00:00.0000000)) or UTCdate between (datetime(2021-03-14 10:00:00.0000000)..datetime(2021-11-07 10:00:00.0000000)) or UTCdate between (datetime(2022-03-13 10:00:00.0000000)..datetime(2022-11-06 10:00:00.0000000)) or UTCdate between (datetime(2023-03-12 10:00:00.0000000)..datetime(2023-11-05 10:00:00.0000000)) or UTCdate between (datetime(2024-03-10 10:00:00.0000000)..datetime(2024-11-03 10:00:00.0000000)), 7h,8h)
};
let DataTimespan=@reqDaysd;
let MonthName=(MonthNo:int)
{
    iif(MonthNo==1,"Jan",iif(MonthNo==2,"Feb",iif(MonthNo==3,"Mar",iif(MonthNo==4,"Apr",iif(MonthNo==5,"May",iif(MonthNo==6,"Jun",iif(MonthNo==7,"Jul",iif(MonthNo==8,"Aug",iif(MonthNo==9,"Sep",iif(MonthNo==10,"Oct",iif(MonthNo==11,"Nov","Dec")))))))))))
};
let STIncidents =()
{
    IncidentHistory
    | where ChangeDate >= ago(DataTimespan) and OwningTeamName in("SKYPEFORBUSINESS\\M365RTCGovescorts","SKYPEFORBUSINESS\\ServiceDelivery","SKYPEFORBUSINESS\\SFBUserMoves","SKYPEFORBUSINESS\\SFBMindtreeDeliveryTeam","SKYPEFORBUSINESS\\SFBMindtreeSD","SKYPEFORBUSINESS\\SkypeMindtreeDelivery")
    | distinct IncidentId
    | join kind = inner
    (
        Incidents
        | where CreateDate >= ago(DataTimespan) and OccurringEnvironment =="PROD"
        | project SourceName, OwningContactAlias, HistoryIncidentId=IncidentId, Slice=OccurringServiceInstanceId, Severity, Status, Title, CreateDate_UTC = CreateDate, CreateDate_PST=UTCtoPST(CreateDate), OwningTeamName, ResolvedBy, ModifiedDate ) on $left.IncidentId == $right.HistoryIncidentId
}    ;
    let STFinalData = ()
{
        STIncidents
        | where OwningTeamName in("SKYPEFORBUSINESS\\M365RTCGovescorts","SKYPEFORBUSINESS\\ServiceDelivery","SKYPEFORBUSINESS\\SFBUserMoves","SKYPEFORBUSINESS\\SFBMindtreeDeliveryTeam","SKYPEFORBUSINESS\\SFBMindtreeSD","SKYPEFORBUSINESS\\SkypeMindtreeDelivery")
        | summarize arg_max(ModifiedDate ,*) by IncidentId
}    ;
    let TempIncidentHistory = ()
{
        STFinalData
        | distinct IncidentId
        | join kind = inner
        (
            IncidentHistory
            | project IncidentId,HistoryId,ChangeDate,ChangeCategories,OwningTeamName,Status,OwningContactAlias,Severity,ChangedBy
        )
        on IncidentId
        | project IncidentId,HistoryId,ChangeDate,ChangeCategories,OwningTeamName,Status,OwningContactAlias,ChangedBy
}    ;
    let AssignedDateUTC = ()
{
        STFinalData
        | distinct IncidentId
        | join kind = inner
        (
            TempIncidentHistory
            | project IncidentId,OwningTeamName,ChangeDate
            | where OwningTeamName in("SKYPEFORBUSINESS\\M365RTCGovescorts","SKYPEFORBUSINESS\\ServiceDelivery","SKYPEFORBUSINESS\\SFBUserMoves","SKYPEFORBUSINESS\\SFBMindtreeDeliveryTeam","SKYPEFORBUSINESS\\SFBMindtreeSD","SKYPEFORBUSINESS\\SkypeMindtreeDelivery")
            | summarize AssignedDate_UTC = min(ChangeDate) by IncidentId
        )
        on IncidentId
        | project IncidentId, AssignedDate_UTC
}    ;
    let AcknowledgeDateUTC = ()
{
        AssignedDateUTC
        | join kind = inner
        (
            TempIncidentHistory
        )
        on IncidentId
        | where ChangeDate >= AssignedDate_UTC and isnotempty(OwningContactAlias)
        | summarize AcknowledgeDate_UTC = min(ChangeDate) by IncidentId, OwningContactAlias
        | project IncidentId, AcknowledgeDate_UTC, OwningContactAlias
        | summarize arg_min(AcknowledgeDate_UTC, *) by IncidentId
        | project IncidentId, AcknowledgeDate_UTC, AckBy = OwningContactAlias
}    ;
    let STIncsFinal=()
{
        STFinalData
        | join kind=leftouter
        (
            AssignedDateUTC
        )
        on IncidentId
        | join kind=leftouter
        (
            AcknowledgeDateUTC
        )
        on IncidentId
        | project IncidentId, Severity, Status, Title, SourceName,AckBy,  OwningTeamName, OwningContactAlias, CreateDate_UTC, CreateDate_PST, AssignedDate_UTC, AssignedDate_PST=UTCtoPST(AssignedDate_UTC), AcknowledgeDate_UTC, AcknowledgeDate_PST=UTCtoPST(AcknowledgeDate_UTC)
}    ;
 let WALSMonthly=()
{
        STIncsFinal
        | extend Aggregation="Monthly"
        | extend Period=strcat(MonthName(datepart("Month",CreateDate_PST)),"-",tostring(datepart("Year",CreateDate_PST)))
        | extend StartDate=startofmonth(CreateDate_PST)
        | extend EndDate=endofmonth(CreateDate_PST)
}    ;
    WALSMonthly
    | extend Type = iif(Title contains "Online","CustomerType","Non-Customer")
    | where Status ==  "ACTIVE"
    | project Period,IncidentId, AssignedDate_UTC, AcknowledgeDate_UTC, AckBy, Type
    //| project Aggregation, IncidentId, Severity, Status, Type, SourceName,  OwningTeamName, CreateDate_UTC, AssignedDate_UTC, AcknowledgeDate_UTC, AckBy, EscalateDate_UTC, EscalateDate_PST
